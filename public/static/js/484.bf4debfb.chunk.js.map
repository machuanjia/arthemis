{"version":3,"sources":["views/user/UserCollection.tsx","views/user/index.tsx","apis/tasks.ts","apis/project.ts","apis/scrum.ts","apis/index.ts","components/Mixin/index.tsx"],"names":["UserCollecrtionComponent","props","state","loading","e","preventDefault","this","callback","isVisible","isRefresh","values","rule","value","isPhone","entity","labelCol","span","wrapperCol","onFinish","handleSubmit","bind","initialValues","username","password","Item","label","name","rules","required","message","placeholder","type","htmlType","className","i18n","t","onClick","cancel","Component","UserView","fetchAction","getUsers","getDetailAction","getUserDetail","createAction","createUser","updateAction","updateUser","deleteAction","deleteUser","record","editEntity","_id","deleteEntity","data","pagination","getRowKey","columns","title","dataIndex","key","render","text","width","placement","EditOutlined","editAction","DeleteOutlined","rowKey","bordered","dataSource","searchAction","isCollectionVisible","openCollection","closeCollection","collectionCallBack","onKeyDown","suffix","SearchOutlined","icon","PlusOutlined","getTable","visible","MODAL_SIZE","md","destroyOnClose","footer","onCancel","listMixin","createTask","request","url","method","updateTask","deleteTask","getTaskDetail","params","getTasks","sortTasks","summaryTask","getSummary","getProjects","createProject","getProjectDetail","id","updateProject","deleteProject","getProjectScrums","createScrum","ComposedComponent","instance","beforeFetch","afterFtech","searchText","showSizeChanger","onShowSizeChange","onChange","pageChange","pageSizeOptions","hideOnSinglePage","pageIndex","pageSize","total","getList","code","keyCode","target","current","page","setState","then","init","pi","ps","keyword","res","err","console","log","error","index","ref","getInstance"],"mappings":"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","file":"static/js/484.bf4debfb.chunk.js","sourcesContent":["/*\n * @Author: D.Y\n * @Date: 2021-02-04 15:27:20\n * @LastEditTime: 2021-04-17 11:00:12\n * @LastEditors: D.Y\n * @FilePath: /arthemis-client/src/views/user/UserCollection.tsx\n * @Description:\n */\nimport React, { Component } from 'react'\nimport { Form, Input, Button } from 'antd'\nimport i18n from 'i18next'\nimport { isPhone } from '@utils/index'\nimport type { IUser } from '@interfaces/user'\n\ntype IUserCollectionProps = {\n  callback: ({ isVisible, isRefresh, values }) => unknown\n  form: any\n  entity: IUser\n}\ntype IUserCollectionState = {\n  loading: boolean\n}\n\nexport default class UserCollecrtionComponent extends Component<\n  IUserCollectionProps,\n  IUserCollectionState\n> {\n  constructor(props) {\n    super(props)\n    this.state = {\n      loading: false,\n    }\n  }\n  componentDidMount() {\n    // console.log(this.props.entity);\n  }\n  cancel(e) {\n    e.preventDefault()\n    this.props.callback({\n      isVisible: false,\n      isRefresh: false,\n      values: '',\n    })\n  }\n  handleSubmit(values) {\n    this.props.callback({\n      isVisible: false,\n      isRefresh: true,\n      values,\n    })\n  }\n  checkPhone(rule, value, callback) {\n    isPhone(value) ? callback() : callback('请输入正确的手机号码')\n  }\n  render() {\n    const { entity } = this.props\n    return (\n      <Form\n        labelCol={{ span: 24 }}\n        wrapperCol={{ span: 24 }}\n        onFinish={this.handleSubmit.bind(this)}\n        initialValues={{\n          username: entity ? entity.username : '',\n          password: entity ? entity.password : '',\n        }}\n      >\n        <Form.Item\n          label=\"用户名\"\n          name=\"username\"\n          rules={[{ required: true, message: '请输入用户名' }]}\n        >\n          <Input placeholder=\"请输入用户名\" />\n        </Form.Item>\n        <Form.Item label=\"密码\" name=\"password\" rules={[{ required: true, message: '请输入密码' }]}>\n          <Input placeholder=\"请输入密码\" type=\"password\" />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"m-r-12\">\n            {i18n.t('action.save')}\n          </Button>\n          <Button onClick={this.cancel.bind(this)}> {i18n.t('action.cancel')}</Button>\n        </Form.Item>\n      </Form>\n    )\n  }\n}\n","import React, { Component, Fragment } from 'react'\nimport { Table, Input, Button, Tooltip, Modal } from 'antd'\n\nimport { ContentLayoutComponent } from '@components/index'\nimport { MODAL_SIZE } from '@constants/index'\nimport UserCollecrtionComponent from './UserCollection'\nimport { listMixin } from '@components/Mixin'\nimport { getUsers, getUserDetail, updateUser, deleteUser, createUser } from '@apis/index'\nimport type { IListMixin } from '@interfaces/mixin'\nimport {\n  SettingOutlined,\n  EditOutlined,\n  DeleteOutlined,\n  SearchOutlined,\n  PlusOutlined,\n} from '@ant-design/icons'\nimport i18n from 'i18next'\n\nclass UserView extends Component<IListMixin, any> {\n  init() {\n    return {\n      fetchAction: getUsers,\n      getDetailAction: getUserDetail,\n      createAction: createUser,\n      updateAction: updateUser,\n      deleteAction: deleteUser,\n    }\n  }\n\n  editAction(record) {\n    this.props.editEntity(record._id)\n  }\n\n  deleteAction(record) {\n    this.props.deleteEntity(record._id)\n  }\n\n  getTable() {\n    const { data, loading, pagination, getRowKey } = this.props\n    const columns = [\n      {\n        title: i18n.t('list.name'),\n        dataIndex: 'username',\n        key: 'username',\n        render: (text) => text,\n      },\n      {\n        title: i18n.t('list.password'),\n        dataIndex: 'password',\n        key: 'password',\n      },\n      //   {\n      //     title: i18n.t('list.address'),\n      //     dataIndex: 'address',\n      //     key: 'address',\n      //   },\n      {\n        title: i18n.t('list.operation'),\n        key: 'action',\n        width: 200,\n        render: (text, record) => (\n          <span>\n            {/* <span className=\"m-l-12 m-r-12 icon-action\">\n              <SettingOutlined /> {i18n.t('action.setting')}\n            </span> */}\n            <span className=\"m-l-12 m-r-12 icon-action\">\n              <Tooltip placement=\"top\" title={i18n.t('action.edit')}>\n                <EditOutlined onClick={this.editAction.bind(this, record)} />\n              </Tooltip>\n            </span>\n            <span className=\"m-l-12 m-r-12 icon-action\">\n              <Tooltip placement=\"top\" title={i18n.t('action.delete')}>\n                <DeleteOutlined onClick={this.deleteAction.bind(this, record)} />\n              </Tooltip>\n            </span>\n          </span>\n        ),\n      },\n    ]\n\n    return (\n      <Table\n        rowKey={getRowKey}\n        pagination={pagination}\n        loading={loading}\n        bordered={true}\n        columns={columns}\n        dataSource={data}\n      />\n    )\n  }\n\n  render() {\n    const {\n      searchAction,\n      isCollectionVisible,\n      openCollection,\n      closeCollection,\n      collectionCallBack,\n      entity,\n    } = this.props\n    return (\n      <ContentLayoutComponent>\n        <Fragment key=\"left\">\n          <Input\n            className=\"search\"\n            onKeyDown={searchAction}\n            suffix={<SearchOutlined />}\n            placeholder={i18n.t('list.search')}\n          />\n        </Fragment>\n        <Fragment key=\"actions\">\n          <Button\n            type=\"primary\"\n            icon={<PlusOutlined />}\n            className={`${'action-btn'}`}\n            onClick={openCollection}\n          >\n            {i18n.t('action.create')}\n          </Button>\n        </Fragment>\n        <Fragment key=\"main\">\n          {this.getTable()}\n          <Modal\n            title={i18n.t('action.create')}\n            visible={isCollectionVisible}\n            width={MODAL_SIZE.md}\n            destroyOnClose={true}\n            footer={false}\n            onCancel={closeCollection}\n          >\n            {\n              // @ts-ignore\n              <UserCollecrtionComponent entity={entity} callback={collectionCallBack} />\n            }\n          </Modal>\n        </Fragment>\n      </ContentLayoutComponent>\n    )\n  }\n}\n\nexport default listMixin(UserView)\n","/*\n * @Author: D.Y\n * @Date: 2021-04-14 19:16:26\n * @LastEditTime: 2021-04-21 10:02:26\n * @LastEditors: D.Y\n * @FilePath: /arthemis-client/src/apis/tasks.ts\n * @Description:\n */\nimport type { Task } from '@interfaces/task'\nimport request from '@utils/request'\n\nexport const createTask = (data: Task) => {\n  return request({\n    url: '/tasks',\n    method: 'post',\n    data,\n  })\n}\n\nexport const updateTask = (_id: string, data: Task) => {\n  return request({\n    url: `/tasks/${_id}`,\n    method: 'put',\n    data,\n  })\n}\n\nexport const deleteTask = (_id: string) => {\n  return request({\n    url: `/tasks/${_id}`,\n    method: 'delete',\n  })\n}\n\nexport const getTaskDetail = (_id: string, params = {}) => {\n  return request({\n    url: `/tasks/${_id}`,\n    method: 'get',\n    params,\n  })\n}\n\nexport const getTasks = (params = {}) => {\n  return request({\n    url: '/tasks',\n    method: 'get',\n    params,\n  })\n}\n\nexport const sortTasks = (\n  _id: string,\n  data: {\n    fromId: string\n    toId: string\n    oldIndex: number\n    newIndex: number\n  },\n) => {\n  return request({\n    url: `/tasks/${_id}/sort`,\n    method: 'post',\n    data,\n  })\n}\n\nexport const summaryTask = (data: { content: string; dateNumber: string }) => {\n  return request({\n    url: '/task-summary',\n    method: 'post',\n    data,\n  })\n}\nexport const getSummary = (params = {}) => {\n  return request({\n    url: '/task-summary',\n    method: 'get',\n    params,\n  })\n}\n","/*\n * @Author: D.Y\n * @Date: 2021-02-04 15:27:20\n * @LastEditTime: 2021-04-20 15:54:24\n * @LastEditors: D.Y\n * @FilePath: /arthemis-client/src/apis/project.ts\n * @Description: \n */\n\nimport type { IProject } from '@interfaces/project'\nimport request from '@utils/request'\n\n\nexport const getProjects = (params = {}) => {\n  return request({\n    url: '/projects',\n    method: 'get',\n    params,\n  })\n}\n\nexport const createProject = (data: IProject) => {\n  return request({\n    url: '/projects',\n    method: 'post',\n    data,\n  })\n}\n\nexport const getProjectDetail = (id: string, params = {}) => {\n  return request({\n    url: `/projects/${id}`,\n    method: 'get',\n    params,\n  })\n}\n\nexport const updateProject = (id: string, data: IProject) => {\n  return request({\n    url: `/projects/${id}`,\n    method: 'put',\n    data,\n  })\n}\n\nexport const deleteProject = (id: string) => {\n  return request({\n    url: `/projects/${id}`,\n    method: 'delete',\n  })\n}\n","\n/*\n * @Author: D.Y\n * @Date: 2021-04-20 19:17:58\n * @LastEditTime: 2021-04-20 19:45:35\n * @LastEditors: D.Y\n * @FilePath: /arthemis-client/src/apis/scrum.ts\n * @Description: \n */\nimport type { IScrum } from '@interfaces/scrum'\nimport request from '@utils/request'\n\nexport const getProjectScrums = (params = {}) => {\n    return request({\n      url: '/scrums',\n      method: 'get',\n      params,\n    })\n  }\n\n  export const createScrum = (data: IScrum) => {\n    return request({\n      url: '/scrums',\n      method: 'post',\n      data,\n    })\n  }","/*\n * @Author: D.Y\n * @Date: 2021-02-04 18:55:58\n * @LastEditTime: 2021-04-20 19:18:06\n * @LastEditors: D.Y\n * @FilePath: /arthemis-client/src/apis/index.ts\n * @Description:\n */\nexport * from './tasks'\nexport * from './users'\nexport * from './project'\nexport * from './scrum'\n","import React, { Component } from 'react'\n\ntype IListState = {\n  data: Record<string, unknown>[]\n  loading: boolean\n  isCollectionVisible: boolean\n  entity: Record<string, unknown>\n}\nexport const listMixin = (ComposedComponent) =>\n  class extends Component<any, IListState> {\n    private instance = null\n    private fetchAction = null\n    private getDetailAction = null\n    private createAction = null\n    private updateAction = null\n    private deleteAction = null\n\n    private beforeFetch = null\n    private afterFtech = null\n    private searchText = ''\n    private pagination = {\n      showSizeChanger: true,\n      onShowSizeChange: this.onShowSizeChange.bind(this),\n      onChange: this.pageChange.bind(this),\n      pageSizeOptions: ['10', '20', '30', '40', '50', '60', '100'],\n      hideOnSinglePage: false,\n      pageIndex: 1,\n      pageSize: 20,\n      total: 0,\n    }\n    constructor(props) {\n      super(props)\n      this.state = {\n        data: [],\n        loading: false,\n        isCollectionVisible: false,\n        entity: null,\n      }\n    }\n\n    componentDidMount() {\n      this.beforeFetch()\n      this.getList()\n      this.afterFtech()\n    }\n\n    searchAction(e) {\n      const code = e.keyCode\n      const { value } = e.target\n      if (code === 13) {\n        this.searchText = value\n        this.pagination.pageIndex = 1\n        this.pagination.pageSize = 20\n        this.getList()\n      }\n    }\n\n    onShowSizeChange(current, pageSize) {\n      this.pagination.pageSize = pageSize\n      this.getList()\n    }\n\n    pageChange(page) {\n      this.pagination.pageIndex = page\n      this.getList()\n    }\n\n    openCollection() {\n      this.setState({\n        isCollectionVisible: true,\n      })\n    }\n\n    closeCollection() {\n      this.setState({\n        isCollectionVisible: false,\n      })\n    }\n\n    collectionCallBack({ isVisible, isRefresh, values = '' }) {\n      isVisible && this.openCollection()\n      !isVisible && this.closeCollection()\n      if (values) {\n        if (!this.state.entity) {\n          // 新建\n          this.createAction(values).then(() => {\n            this.pagination.pageIndex = 1\n            this.getList()\n          })\n        } else {\n          // 修改\n          this.updateAction(this.state.entity._id, values).then(() => {\n            this.pagination.pageIndex = 1\n            this.getList()\n          })\n        }\n      } else {\n        isRefresh && this.getList()\n      }\n    }\n\n    getInstance(instance) {\n      if (instance) {\n        this.instance = instance\n        const {\n          fetchAction = () => {},\n          getDetailAction = () => {},\n          createAction = () => {},\n          updateAction = () => {},\n          deleteAction = () => {},\n          beforeFetch = () => {},\n          afterFtech = () => {},\n        } = this.instance.init()\n        this.fetchAction = fetchAction\n        this.getDetailAction = getDetailAction\n        this.createAction = createAction\n        this.updateAction = updateAction\n        this.deleteAction = deleteAction\n        this.beforeFetch = beforeFetch\n        this.afterFtech = afterFtech\n      }\n    }\n\n    getList() {\n      this.setState({\n        loading: true,\n      })\n      this.fetchAction({\n        pi: this.pagination.pageIndex - 1,\n        ps: this.pagination.pageSize,\n        keyword: this.searchText,\n      }).then((res) => {\n        const { page, total, data } = res\n        this.pagination.total = total\n        this.pagination.pageIndex = page\n        this.setState({\n          loading: false,\n          data,\n        })\n      })\n    }\n\n    editEntity(id: string) {\n      this.getDetailAction(id).then(\n        (data) => {\n          this.setState({\n            entity: data,\n            isCollectionVisible: true,\n          })\n        },\n        (err) => {\n          console.log(err)\n        },\n      )\n    }\n\n    deleteEntity(id: string) {\n      this.deleteAction(id).then(\n        () => {\n          this.pagination.pageIndex = 1\n          this.getList()\n        },\n        (error) => {\n          console.log(error)\n        },\n      )\n    }\n\n    getRowKey(record, index) {\n      return record.id || record._id || index\n    }\n\n    render() {\n      const { loading, data, isCollectionVisible, entity } = this.state\n      return (\n        <ComposedComponent\n          loading={loading}\n          data={data}\n          entity={entity}\n          pagination={this.pagination}\n          isCollectionVisible={isCollectionVisible}\n          searchAction={this.searchAction.bind(this)}\n          openCollection={this.openCollection.bind(this)}\n          closeCollection={this.closeCollection.bind(this)}\n          getRowKey={this.getRowKey.bind(this)}\n          getList={this.getList.bind(this)}\n          collectionCallBack={this.collectionCallBack.bind(this)}\n          editEntity={this.editEntity.bind(this)}\n          deleteEntity={this.deleteEntity.bind(this)}\n          {...this.props}\n          ref={this.getInstance.bind(this)}\n        />\n      )\n    }\n  }\n"],"sourceRoot":""}